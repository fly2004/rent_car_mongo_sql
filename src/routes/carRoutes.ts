// üìÅ routes/carRoutes.ts
import { Router } from "express";
import { param } from "express-validator";
import { CarController } from "../controllers/CarController";
import { carService } from "../config/appConfig";
import { validateRequest } from "../middlewares/validateRequest";
import { asyncHandler } from "../middlewares/asyncHandler";
import { carSchema } from "../schemas/carSchema";
import { validateWithSchema } from "../middlewares/validateWithSchema";

export const router = Router();
const controller = new CarController(carService);

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã
router.get("/", asyncHandler(controller.getAllCars));

// –ü–æ–ª—É—á–∏—Ç—å –º–∞—à–∏–Ω—É –ø–æ ID
router.get(
    "/:id",
    [param("id").isUUID().withMessage("Invalid car ID")],
    validateRequest,
    asyncHandler(controller.getCarById)
);

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
router.post(
    "/",
    validateWithSchema(carSchema),
    asyncHandler(controller.addCar)
);

// –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É –ø–æ ID
router.delete(
    "/:id",
    [param("id").isUUID().withMessage("Invalid car ID")],
    validateRequest,
    asyncHandler(controller.deleteCar)
);

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã
router.patch(
    "/:id/availability",
    [
        param("id").isUUID().withMessage("Invalid car ID"),
        // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å `express-validator` —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Joi-—Å—Ö–µ–º—É
    ],
    validateRequest,
    asyncHandler(controller.updateAvailability)
);

export const carRoutes = router;
